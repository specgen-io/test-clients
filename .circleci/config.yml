version: 2.1

orbs:
  artifactory: specgen/artifactory@0.2.0

parameters:
  specgen-version:
    type: string
    default: 2.0.519

  specgen-version-major:
    type: string
    default: v2

jobs:
  test-service:
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/go:1.16.4
    steps:
      - checkout
      - run:
          name: Build test-service
          command: |
            cd ./test-service
            go install github.com/specgen-io/specgen/<<pipeline.parameters.specgen-version-major>>@v<< pipeline.parameters.specgen-version >>
            go generate
            go build -o test-service
      - persist_to_workspace:
          root: .
          paths:
            - test-service

  go:
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/go:1.16.4
    steps:
      - checkout
      - attach_workspace:
          at: .
      - start-service:
          port: 8081
      - run:
          name: Test Go client
          command: |
            cd ./go
            go install github.com/specgen-io/specgen/<<pipeline.parameters.specgen-version-major>>@v<< pipeline.parameters.specgen-version >>
            mkdir -p ./test-results
            go install github.com/jstemmer/go-junit-report@v0.9.1
            go test ./... -v
            go test ./... -v 2>&1 | go-junit-report > ./test-results/go-test-report.xml
      - store_test_results:
          path: ./go/test-results

  ruby:
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/ruby:2.4.9
    steps:
      - checkout
      - attach_workspace:
          at: .
      - artifactory/setup-gems:
          jfrog-server-url: specgen.jfrog.io
          repo-name: gems
      - start-service:
          port: 8081
      - run:
          name: Test Ruby client
          command: |
            cd ./ruby
            bundle inject specgen "= << pipeline.parameters.specgen-version >>"
            bundle install
            export SERVICE_URL=http://localhost:8081
            rake
      - store_test_results:
          path: ./ruby/test-results

  scala-sttp:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./scala-sttp/build.sbt" }}
      - artifactory/setup-sbt:
          jfrog-server-url: specgen.jfrog.io
          repo-name: sbt
      - start-service:
          port: 8081
      - run:
          name: Test Scala sttp client
          command: |
            cd ./scala-sttp
            export SERVICE_URL=http://localhost:8081
            mkdir -p ./test-results
            sbt -Djunitxml=./test-results test < /dev/null
      - store_test_results:
          path: ./scala-sttp/test-results
      - save_cache:
          key: cache-{{ checksum "./scala-sttp/build.sbt" }}
          paths:
            - ~/.sbt
            - ~/.ivy2

  ts-axios:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/node:14.15.1
    steps:
      - checkout
      - attach_workspace:
          at: .
      - start-service:
          port: 8081
      - run:
          name: Test axios client
          command: |
            cd ./ts-axios-superstruct
            npm add specgen.io@$SPECGEN_VERSION
            npm install
            npm run specgen
            export SERVICE_URL=http://localhost:8081
            mkdir -p ./test-results
            export JEST_JUNIT_OUTPUT_DIR=./test-results
            npm run test
      - store_test_results:
          path: ./ts-axios-superstruct/test-results
          
commands:
  start-service:
    parameters:
      port:
        type: integer
    steps:
      - run:
          name: Start test-service
          command: ./test-service/test-service --port << parameters.port >>
          background: true
      - wait-url:
          url: http://localhost:<< parameters.port >>/

  wait-url:
    parameters:
      url:
        type: string
      sleep:
        type: integer
        default: 5
      attempts:
        type: integer
        default: 12
    steps:
      - run:
          name: Wait until url is available
          command: |
            attempt_counter=0
            max_attempts=<< parameters.attempts >>

            until $(curl --output /dev/null --silent --head --fail << parameters.url >>); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep << parameters.sleep >>
            done

workflows:
  build-test:
    jobs:
      - test-service:
          context: specgen
      - go:
          context: specgen
          requires:
            - test-service
      - ruby:
          context: specgen
          requires:
            - test-service
      - scala-sttp:
          context: specgen
          requires:
            - test-service
      - ts-axios:
          context: specgen
          requires:
            - test-service
